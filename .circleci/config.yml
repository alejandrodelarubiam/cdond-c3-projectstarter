version: 2.1
orbs:
#  node: circleci/node:4.1
  slack: circleci/slack@4.1
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    #parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: ${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --force
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    #parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --silent --insecure https://kvdb.io/iqTXRVMkwJTzP3pVxiCak/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if(( SUCCESS==1 )); 
            then
               cd ~/project/backend
               npm install
               npm run migrations:revert
            fi        
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
            # exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          channel: C04PR8ZAEUF
          event: fail
          template: basic_fail_1

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
            # exit 1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          channel: C04PR8ZAEUF
          event: fail
          template: basic_fail_1

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Front-end test
          command: |    
            cd frontend
            npm install
            npm run test
      - slack/notify:
          channel: C04PR8ZAEUF
          event: fail
          template: basic_fail_1               
  test-backend:
    docker: 
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Back-end test
          command: |    
            cd backend
            npm install
            npm run test
      - slack/notify:
          channel: C04PR8ZAEUF
          event: fail
          template: basic_fail_1
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0 
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-scan]      
      - run:
          name: Front-end scan
          command: |    
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
      - slack/notify:
          channel: C04PR8ZAEUF
          event: fail
          template: basic_fail_1       

  scan-backend:
    docker:
      - image: circleci/node:13.8.0 
    steps:
      - checkout
      - restore_cache:
          keys: [backend-scan]       
      - run:
          name: Back-end scan
          command: |    
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
      - slack/notify:
          channel: C04PR8ZAEUF
          event: fail
          template: basic_fail_1
  deploy-infrastructure:
    docker: 
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" --query "Reservations[].Instances[].InstanceId" --output text)
            PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            echo "$PUBLIC_IP" >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: .circleci/ansible/
          paths:
            - inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
        - image: python:3.9.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["1e:3e:56:c7:80:7f:35:68:2a:e7:26:8d:95:1a:db:89"]    
      - attach_workspace:
          at: .circleci/ansible/
      - run:
          name: Install dependencies
          command: |
            
            # Install software-properties-common
            apt-get update
            apt-get install -y software-properties-common

            # Install tar and gzip
            apt-get update
            apt-get install -y tar gzip
            
            # Install ansible
            apt-get update -y
            apt install ansible -y
            which ansible
            
            # Install awscli
            apt-get install -y python3-pip
            pip3 install awscli
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment

  run-migrations:
    docker:
        - image: circleci/node:13.8.0 
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations --timeout=60000 > migrations_dump.txt
            cat ~/project/backend/migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "No migrations are pending" ~/project/backend/migrations_dump.txt
            then
            # Bucket ID: "iqTXRVMkwJTzP3pVxiCak" 
            curl --silent --insecure https://kvdb.io/iqTXRVMkwJTzP3pVxiCak/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy-environment   

  deploy-frontend:
    docker:
        - image: python:3.9.16
    steps:
      - checkout 
      - run:
          name: Install dependencies (Ansible, Node, Npm, AWS CLI)
          command: |
            # Install software-properties-common
            apt-get update
            apt-get install -y software-properties-common
            
            # Install ansible
            apt-get update -y
            apt install ansible -y
            which ansible
            
            # Install awscli
            apt-get install -y python3-pip
            pip3 install awscli

            # Install Nodejs
            apt-get update -y
            apt-get install -y nodejs

            # Install Npm
            apt-get update -y
            apt-get install -y npm  
      - run:
          name: Get backend url
          command: |
            INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" --query "Reservations[].Instances[].InstanceId" --output text)
            BACKEND_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}" > ~/api_url.txt
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - persist_to_workspace:
          root: ~/
          paths:
            - api_url.txt
      - destroy-environment
      - revert-migrations
   
                    
  deploy-backend:
    docker:
        - image: python:3.9.16    
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["1e:3e:56:c7:80:7f:35:68:2a:e7:26:8d:95:1a:db:89"]    
      - attach_workspace:
          at: .circleci/ansible/ 
      - run:
          name: Install dependencies (tar, gzip, ansible, nodejs, and npm)
          command: |
            # Install software-properties-common
            apt-get update
            apt-get install -y software-properties-common

            # Install tar and gzip
            apt-get update
            apt-get install -y tar gzip
            
            # Install ansible
            apt-get update -y
            apt install ansible -y
            which ansible
            
            # Install awscli
            apt-get install -y python3-pip
            pip3 install awscli

            # Install Nodejs
            apt-get update -y
            apt-get install -y nodejs

            # Install Npm
            apt-get update -y
            apt-get install -y npm 
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            ls -a
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment
      - revert-migrations
  smoke-test:
    docker:
        - image: python:3.9.16 
    steps:
      - checkout
      - attach_workspace:
          at: ~/     
      - run:
          name: Install dependencies (curl, nodejs, npm, awscli)
          command: |
            # Install software-properties-common
            apt-get update
            apt-get install -y software-properties-common

            # Install curl
            apt-get update -y
            apt-get install -y curl

            # Install Nodejs
            apt-get update -y
            apt-get install -y nodejs

            # Install Npm
            apt-get update -y
            apt-get install -y npm 

            # Install awscli
            apt-get install -y python3-pip
            pip3 install awscli
      - run:
          name: Get backend url and Backend smoke test.
          command: |
            export API_URL=$(cat ~/api_url.txt)
            echo "${API_URL}/api/status"
            URL_BACKEND=$(echo "${API_URL}/api/status")
            echo ${URL_BACKEND}
            if curl -s ${URL_BACKEND} | grep "ok"
            then
                exit 0
            else
                exit 1
            fi            
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - destroy-environment
      - revert-migrations
  cloudfront-update:
    docker:
        - image: python:3.9.16
    steps:
      - checkout
      - run:
          name: Install dependencies (curl, nodejs, npm, awscli)
          command: |
            # Install software-properties-common
            apt-get update
            apt-get install -y software-properties-common

            # Install curl
            apt-get update -y
            apt-get install -y curl

            # Install Nodejs
            apt-get update -y
            apt-get install -y nodejs

            # Install Npm
            apt-get update -y
            apt-get install -y npm 

            # Install awscli
            apt-get install -y python3-pip
            pip3 install awscli
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo $OldWorkflowID >> ~/OldWorkflowID.txt
            cat ~/OldWorkflowID.txt

            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name "udapeople-${OldWorkflowID}" \
              --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople

            echo OldWorkflowID: "${OldWorkflowID}"
            echo Current Workflow Id: "${CIRCLE_WORKFLOW_ID:0:7}"       
      - destroy-environment
      - revert-migrations
  cleanup:
    docker:
        - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            # Fetch the stack names 
            # I did it slightly different, listing all stacks, filtering by its parameters and comparing with the current version        
            # This time, only for submit purporses, I fixed CIRCLE_WORKFLOW_ID in order to keep Stacks of previous delivered URLs
            CIRCLE_WORKFLOW_ID_FIXED=d9f9dec
            echo $CIRCLE_WORKFLOW_ID_FIXED
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE UPDATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"
            for STACK_NAME in "${STACKS[@]}"; do
            WorkflowID=$(aws cloudformation describe-stacks --stack-name $STACK_NAME \
            --query 'Stacks[].Parameters[?ParameterKey==`ID`].ParameterValue' --output text)
            if [[ "${CIRCLE_WORKFLOW_ID_FIXED}" != "$WorkflowID" ]]
            then
              echo "----------------Delete confirmed------------------------"
              echo "Deleting udapeople-${WorkflowID}"
              echo "Current version is udapeople-${CIRCLE_WORKFLOW_ID:0:7}"
              aws s3 rb "s3://udapeople-${WorkflowID}" --force
              aws cloudformation delete-stack --stack-name "udapeople-backend-${WorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${WorkflowID}"
              aws cloudformation wait stack-delete-complete --stack-name "udapeople-backend-${WorkflowID}"
              aws cloudformation wait stack-delete-complete --stack-name "udapeople-frontend-${WorkflowID}" 
              #Query to check the deleted stacks  
              echo "The following stacks have been deleted successfully:"           
              aws cloudformation list-stacks --query "StackSummaries[?starts_with(StackName, 'udapeople-backend-${WorkflowID}')].StackName" --stack-status-filter DELETE_COMPLETE --no-paginate --output text
              aws cloudformation list-stacks --query "StackSummaries[?starts_with(StackName, 'udapeople-frontend-${WorkflowID}')].StackName" --stack-status-filter DELETE_COMPLETE --no-paginate --output text
            else
              echo "----------------Cannot cleanup, $WorkflowID is current version------------------------"
            fi
            done 
            
workflows:
  default:
    jobs:
      # - build-frontend:
      #     context: Udacity_CICD_Project
      # - build-backend:
      #     context: Udacity_CICD_Project
      # - test-frontend:
      #     requires: [build-frontend]
      #     context: Udacity_CICD_Project
      # - test-backend:
      #     requires: [build-backend]
      #     context: Udacity_CICD_Project
      # - scan-backend:
      #     requires: [build-backend]
      #     context: Udacity_CICD_Project
      # - scan-frontend:
      #     requires: [build-frontend]
      #     context: Udacity_CICD_Project
      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: [master]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      #     filters:
      #       branches:
      #         only: [master]   
      # - run-migrations:
      #     requires: [configure-infrastructure]
      #     filters:
      #       branches:
      #         only: [master]
      # - deploy-frontend:
      #     requires: [run-migrations]
      #     filters:
      #       branches:
      #         only: [master]
      # - deploy-backend:
      #     requires: [run-migrations]      
      #     filters:
      #       branches:
      #         only: [master]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      #     filters:
      #       branches:
      #         only: [master]
      # - cloudfront-update:
      #     requires: [smoke-test]
      #     filters:
      #       branches:
      #         only: [master]
      - cleanup
          #requires: [cloudfront-update]
      